<?php

use Drupal\kickstart\Installer\Form\KickstartDemoInstallForm;
use Drupal\Core\Messenger\MessengerInterface;

/**
 * @file
 * Install, update and uninstall functions for Kickstart profile.
 */

/**
 * Implements hook_install_tasks().
 */
function kickstart_install_tasks(&$install_state) {
  $tasks = [
    KickstartDemoInstallForm::class => [
      'display_name' => t('Install demo content'),
      'type' => 'form',
    ],
    'kickstart_theme_setup' => [
      'display_name' => t('Install theme'),
      'display' => FALSE,
    ],
    'kickstart_finish' => [
      'display' => FALSE,
    ],
  ];

  return $tasks;
}

/**
 * Install the theme.
 *
 * @param array $install_state
 *   The install state.
 */
function kickstart_theme_setup(array &$install_state) {
  // Clear all status messages generated by modules installed in previous step.
  Drupal::messenger()->deleteByType(MessengerInterface::TYPE_STATUS);

  // Set the default theme.
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'bartik')
    ->save();

  // Ensure that the install profile's theme is used.
  // @see _drupal_maintenance_theme()
  \Drupal::service('theme.manager')->resetActiveTheme();

  // Enable the admin theme for editing content.
  \Drupal::configFactory()
    ->getEditable('node.settings')
    ->set('use_admin_theme', TRUE)
    ->save(TRUE);
}

/**
 * Run any additional tasks for the installation.
 */
function kickstart_finish() {
  // Re-run the optional config import again since Drupal installation profile
  // imports optional configuration only once.
  // @see \Drupal\Core\Config\ConfigInstaller::installDefaultConfig
  // @see install_install_profile()
  \Drupal::service('config.installer')->installOptionalConfig();
}

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function kickstart_install() {

  // Get profile path.
  $src_path = drupal_get_path('profile', 'kickstart') . '/resources/files';

  // Get public files directory.
  $dest_path = file_default_scheme() . '://';

  // Files to copy.
  // Not all files are copied. So we list them here individually.
  $filesets = [
    '' => [
      'aditya-vyas-1392552-unsplash.jpg',
      'chuttersnap-255216-unsplash.png',
      'donald-giannatti-671274-unsplash.jpg',
      'nasa-43567-unsplash.jpg',
      'nasa-43569-unsplash.jpg',
      'nasa-89116-unsplash.jpg',
      'spacex-1130896-unsplash.jpg',
      'spacex-81773-unsplash.jpg',
      'terence-burke-1417892-unsplash.jpg',
    ],
    'default_images/' => [
      'profile-default.jpg',
    ],
  ];

  // Copy files in public files directory. Note: Managed files are not desired.
  foreach ($filesets as $destination => $files) {
    foreach ($files as $file) {
      if (file_exists($src_path . '/' . $file)) {
        // If the file exists in public://, it should be skipped, as these are
        // tied to media entities which hard-code the path/file.
        $directory = $dest_path . $destination;
        if (!empty($destination)) {
          file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
        }
        file_unmanaged_copy($src_path . '/' . $file, $directory . $file);
      }
    }
  }
}
